# How to run

scalac -classpath $(echo $SPARK_HOME/jars/*.jar common-1.0.0-jar-with-dependencies.jar | tr ' ' ':') Problem3.scala
jar -cvf ./Problem3.jar *.class
spark-submit -class Problem3 Problem3.scala

# Explanation
The main dataset of this project is based on the Pokemon world, the Nintendo videogame. 
Link for the datasets: https://www.kaggle.com/datasets/maca11/all-pokemon-dataset  https://www.kaggle.com/datasets/terminus7/pokemon-challenge

(a) 
We defined a new Scala class Pokemon with appropriate fields to store some important attributes as the Pokemon's name and its types.

(b)
We clustered the Pokemon for them height and weight using kMeans algorithm. We normalized the scales of the values (because kMeans works better with parameters with the same scale).

The next point was to choose the best number of cluster "k" for clustering. We used the squared distance in order to obtain this value. We computed this metric on a number of cluster between 10 and 50.
The main idea is that if we plot the squared distance for each cluster we can obtain an hyperbole in which the location of a bend (knee) is generally considered as an indicator of the appropriate number of clusters (Elbow method). It is also possible to plot this graph on the python source code attached. To obtain the same result in an unsupervised learning we decided a threshold. If from a step to another there is less than the amount of threshold of difference, it means that we need to stop here, because we found the correct value. 
Eventually, we saved the whole set of elements with their cluster in order to plot them with the notebook.

(c)
We computed the most common Pokemon type and we printed the most powerful Pokemon (by its statistics) for this type. Then, we found the strongest Pokemon to compare him with the previous result. We discovered that they are not the same Pokemon, because the strongest one is of Psychic type, but the most common type is Water.

(d)
We grouped the legendaries Pokemon for each generation and we printed them. Then we did the same grouping, but for finalEvo Pokemon which are not also legendaries nor mega evolution.

(e)
We used a cross validation model to predict the Pokemon type from his effectiveness. The parameters for the cv are: maxDepth = (5, 10, 15), impurity = ("entropy", "gini") and maxBins = (20, 50, 100). We also used the StringIndexer to convert the strings in numbers. Eventually, we studied the results to comment them.

With the best parameters the results are amazing, because the accuracy is 0.86 and actually the error are not real error. This is because, for example for the Pokemon "Exeggcute" the prediction types are "Psychic, Grass" and the real type are "Grass, Psychic". If the order of type was not important this cross validator did not make wrong predictions. The classier cannot understand the difference between "Psychic, Grass" and "Grass, Psychic" due to the same type effectiveness of the previous results.

Then we tried to use less parameters in the cross validator: maxDepth = (5), impurity = ("entropy", "gini") and maxBins = (20). This test is to understand if the task was too easy or not. The new accuracy is 0.55. From the results we found some wrong prediction, for example the Pokemon "Gengar" the prediction type is "(Poison)" but the real types are "(Ghost, Poison)". Actually it was not so far from the real answer.

The parameters of the best tree are: 
- maxDepth: 10
- impurity: entropy
- maxBins: 20

(f)

VERTICES: 784
EDGES: 48048

Connected component: 1

Degree distribution stats: (count: 784, mean: 122.571429, stdev: 10.780983, max: 160.000000, min: 90.000000)

Top pokemon and degrees: 
(Hoothoot,160)
(Salazzle,153)
(Mega Heracross,152)
(Skrelp,152)
(Litleo,150)
(Claydol,150)
(Steenee,150)
(Reuniclus,149)
(Swablu,149)
(Beldum,148)

Triangle count graph: (count: 784, mean: 1045.741071, stdev: 181.434317, max: 1675.000000, min: 561.000000)
Average clustering coefficient: 0.13948511981174289

Equal vertex: 156

Stats about paths: (count: 7785, mean: 1.846371, stdev: 0.360593, max: 2.000000, min: 1.000000)

Length , count for paths: 
(0,10)
(1,1196)
(2,6589)







